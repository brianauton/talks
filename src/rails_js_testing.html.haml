!!!
%html
  %head
    %title JavaScript Testing for Rails Apps
    %link{rel:"stylesheet", href:"css/reveal.min.css"}
    %link{rel:"stylesheet", href:"css/theme/default.css", id:"theme"}
    %link{rel:"stylesheet", href:"lib/css/tomorrow-night-bright.css"}
    %link{rel:"stylesheet", href:"css/custom.css"}
  %body
    .reveal
      .slides
        %section
          %h1 Beverage Driven Development
          %p Testing your Rails Javascript
          %p with Mocha, Chai, and Konacha
          %p &nbsp;
          %p by Brian Auton

        %section
          %h2 Brian Auton
          %p &nbsp;
          %p &nbsp;
          %p Developer and consultant at
          %h3
            %img.neomind_logo{src:"image/neologo.png"}
            Neomind Labs

        %section
          %h2 Why JavaScript tests?
          %ul
            %li Modular and testable
            %li Regressions
            %li Executable specification

        %section
          %h2 JS test workflow
          %ul
            %li Real browser
            %li Headless
            %li Automated

        %section
          %h2 Mocha
          %ul
            %li Configurable: dialects, assertions, output
            %li Good asynchronous support
            %li Works in browser or server-side

        %section
          %h2 Mocha: Write a test        
          :code_js
            function expandHeader() {
              $("#header").height(200);
            }
          .fragment
            :code_js
              suite("expandHeader", function() {
                setup(function() {
                  $("body").append("<div id='header'></div>");
                });
                test("should set the size", function() {
                  expandHeader();
                  if($("#header").height() !== 200) throw "failure";
                });
              });

        %section
          %h2 Mocha: Better with CoffeeScript
          :code_coffee
            suite "expandHeader", ->
              setup ->
                $("body").append "<div id='header'></div>"
              test "should set the size", ->
                expandHeader()
                throw "failure" unless $("#header").height() == 200

        %section
          %h2 Chai: Adding assertions
          :code_coffee
            assert = chai.assert
            suite "expandHeader", ->
              setup ->
                $("body").append "<div id='header'></div>"
              test "should set the size", ->
                expandHeader()
                assert.equal 200, $("#header").height()

        %section
          %h2 Chai: should-style
          :code_coffee
            should = chai.should()
            suite "expandHeader", ->
              setup ->
                $("body").append "<div id='header'></div>"
              test "should set the size", ->
                expandHeader()
                $("#header").height().should.equal 200

        %section
          %h2 Chai: expect-style
          :code_coffee
            expect = chai.expect
            suite "expandHeader", ->
              setup ->
                $("body").append "<div id='header'></div>"
              test "should set the size", ->
                expandHeader()
                expect($("#header").height()).to.equal 200

        %section
          %h2 Mocha: Bdd-style
          :code_coffee
            mocha.ui "bdd"
            assert = chai.assert
            describe "expandHeader", ->
              beforeEach ->
                $("body").append "<div id='header'></div>"
              it "should set the size", ->
                expandHeader()
                assert.equal 200, $("#header").height()

        %section
          %h2 Mocha: Asynchronous
          :code_js
            function expandHeader(callback) {
              $("#header").animate({height:200}, callback);
            }
          .fragment
            :code_coffee
              assert = chai.assert
              suite "expandHeader", ->
                setup ->
                  $("body").append "<div id='header'></div>"
                test "should set the size", (done)->
                  expandHeader ->
                    assert.equal 200, $("#header").height()
                    done()

        %section
          %h2 Konacha
          %ul
            %li Handles HTML, routing, and server
            %li Asset pipeline support
            %li Clean environment for each test

        %section
          %h2 Installing Konacha
          %label Gemfile
          :code
            group :test, :development do
              gem 'konacha'
            end
          %label config/initializers/konacha.rb
          :code
            Konacha.configure do |config|
              config.spec_dir = "test/javascripts"
            end

        %section
          %h2 Konacha: Writing a test
          %label test/javascripts/test_helper.js.coffee
          :code_coffee
            mocha.ui "tdd"
            mocha.globals ["$"]
          %label test/javascripts/my_function_test.js.coffee
          :code_coffee
            #= require test_helper
            #= require application
            suite "expandHeader", ->
              setup ->
                $("body").append "<div id='header'></div>"
              test "should set the size", (done)->
                expandHeader ->
                  assert.equal 200, $("#header").height()
                  done()

        %section
          %h2 Konacha: Test drivers
          %ul
            %li Selenium (default)
            %li Capybara-webkit
            %li Poltergeist

        %section
          %h2 Poltergeist
          %ul
            %li Install PhantomJS binary
            %li True headless webkit
            %li No QT or Xvfb required

        %section
          %h2 Add Poltergeist to Konacha
          %label Gemfile
          :code
            group :test, :development do
              gem 'konacha'
              gem 'poltergeist', :require => "capybara/poltergeist"
            end
          %label config/initializers/konacha.rb
          :code
            Konacha.configure do |config|
              config.spec_dir = "test/javascripts"
              config.driver = :poltergeist
            end

        %section
          %h2 Run it
          :code_plain
            > rake konacha:run
            .

            Finished in 0.41 seconds
            1 examples, 0 failed, 0 pending

        %section
          %h2 Better Rake Syntax
          %label lib/tasks/test_javascripts.rake
          :code
            task "test:javascripts" => "konacha:run"
            task "test" => [
              "test:units",
              "test:functionals",
              "test:integration",
              "test:javascripts"
            ]
          :code_plain
            > rake test:javascripts
          :code_plain
            > rake

        %section
          %h2 Issues
          %ul
            %li Stack trace handling
            %li Vendored JS libraries

        %section
          %h2 Testable JS code
          %p For another talk...

    %script{src:"js/head.min.js"}
    %script{src:"js/reveal.min.js"}
    :coffee
      Reveal.initialize
        controls: false
        history: true
        center: false
        transition: "linear"
        dependencies: [
          {src:"plugin/notes/notes.js", async:true, condition:->document.body.classList?}
          {src:"plugin/highlight.js", async:true, callback:->hljs.initHighlightingOnLoad()}
        ]
