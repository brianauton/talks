!!!
%html
  %head
    %title JavaScript Testing for Rails Apps
    %link{rel:"stylesheet", href:"css/reveal.min.css"}
    %link{rel:"stylesheet", href:"css/theme/default.css", id:"theme"}
    %link{rel:"stylesheet", href:"lib/css/tomorrow-night-bright.css"}
    %link{rel:"stylesheet", href:"css/custom.css"}
  %body
    .reveal
      .slides
        %section
          %h1 Beverage Driven Development
          %p Testing your Rails Javascript
          %p with Mocha, Chai, and Konacha
          %p &nbsp;
          %p by Brian Auton

        %section
          %h2 Brian Auton
          %p &nbsp;
          %p &nbsp;
          %p Developer and consultant at
          %h3
            %img.neomind_logo{src:"image/neologo.png"}
            Neomind Labs

        %section
          %h2 Why JavaScript tests?
          %ul
            %li Clean code
            %li Find regressions
            %li Executable specification

        %section
          %h2 JS test workflow
          %ul
            %li Real browser
            %li Headless
            %li Automated

        %section
          %h2 Mocha
          %ul
            %li Configurable: dialects, assertions, output
            %li Good asynchronous support
            %li Works in browser or server-side

        %section
          %h2 Mocha: Write a test
          %label app/assets/javascripts/application.js
          :code_js
            function closePopup() {
              $("#popup").remove();
            }
          .fragment
            %label close_popup_test.js
            :code_js
              suite("closePopup", function() {
                setup(function() {
                  $("body").append("<div id='popup'></div>");
                });

                test("should close the popup", function() {
                  closePopup();
                  if($("#popup").is(":visible")) throw "failure";
                });
              });

        %section
          %h2 Mocha: Better with CoffeeScript
          %label app/assets/javascripts/application.js
          :code_js
            function closePopup() {
              $("#popup").remove();
            }
          %label close_popup_test.js.coffee
          :code_coffee
            suite "closePopup", ->
              setup ->
                $("body").append("<div id='popup'></div>");

              test "should close the popup", ->
                closePopup()
                throw "failure" if $("#popup").is ":visible"

        %section
          %h2 Chai: Adding assertions
          %label close_popup_test.js.coffee
          :code_coffee
            assert = chai.assert

            suite "closePopup", ->
              setup ->
                $("body").append "<div id='popup'></div>"

              test "should close the popup", ->
                closePopup()
                assert.equal false, $("#popup").is(":visible")

        %section
          %h2 Chai: should-style
          %label close_popup_test.js.coffee
          :code_coffee
            should = chai.should()

            suite "closePopup", ->
              setup ->
                $("body").append "<div id='popup'></div>"

              test "should close the popup", ->
                closePopup()
                $("#popup").is(":visible").should.equal false

        %section
          %h2 Chai: expect-style
          %label close_popup_test.js.coffee
          :code_coffee
            expect = chai.expect

            suite "closePopup", ->
              setup ->
                $("body").append "<div id='popup'></div>"

              test "should close the popup", ->
                closePopup()
                expect($("#popup").is(":visible")).to.equal false

        %section
          %h2 Mocha: Bdd-style
          %label close_popup_test.js.coffee
          :code_coffee
            mocha.ui "bdd"
            assert = chai.assert

            describe "closePopup", ->
              beforeEach ->
                $("body").append "<div id='popup'></div>"

              it "should close the popup", ->
                closePopup()
                assert.equal false, $("#popup").is(":visible")

        %section
          %h2 Mocha: Asynchronous
          %label app/assets/javascripts/application.js
          :code_js
            function closePopup(callback) {
              $("#popup").fadeOut(400);
            }
          .fragment
            %label close_popup_test.js.coffee
            :code_coffee
              assert = chai.assert

              suite "closePopup", ->
                setup ->
                  $("body").append "<div id='popup'></div>"

                test "should close the popup", (done)->
                  closePopup()
                  assert.equal true, $("#popup").is(":visible")
                  setTimeout ->
                    assert.equal false, $("#popup").is(":visible")
                    done()
                  , 500

        %section
          %h2 Konacha
          %ul
            %li Handles HTML, routing, and server
            %li Asset pipeline support
            %li Clean environment for each test

        %section
          %h2 Installing Konacha
          %label Gemfile
          :code
            group :test, :development do
              gem 'konacha'
            end
          .fragment
            %label config/initializers/konacha.rb
            :code
              Konacha.configure do |config|
                config.spec_dir = "test/javascripts"
              end

        %section
          %h2 With Poltergeist
          %p &nbsp;
          %p http://phantomjs.org/download.html
          .fragment
            %label Gemfile
            :code
              group :test, :development do
                gem 'konacha'
                gem 'poltergeist', :require => "capybara/poltergeist"
              end
          .fragment
            %label config/initializers/konacha.rb
            :code
              Konacha.configure do |config|
                config.spec_dir = "test/javascripts"
                config.driver = :poltergeist
              end

        %section
          %h2 Konacha: our test
          %label test/javascripts/test_helper.js.coffee
          :code_coffee
            mocha.ui "tdd"
            mocha.globals ["$"]
          .fragment
            %label test/javascripts/close_popup_test.js.coffee
            :code_coffee
              #= require test_helper
              #= require application

              suite "closePopup", ->
                setup ->
                  $("body").append "<div id='popup'></div>"

                test "should close the popup", (done)->
                  closePopup()
                  assert.equal true, $("#popup").is(":visible")
                  setTimeout ->
                    assert.equal false, $("#popup").is(":visible")
                    done()
                  , 500

        %section
          %h2 Run it
          %label &nbsp;
          :code_plain
            $ rake konacha:run
            .

            Finished in 0.41 seconds
            1 examples, 0 failed, 0 pending

        %section
          %h2 Better Rake Syntax
          %label lib/tasks/test_javascripts.rake
          :code
            task "test:javascripts" => "konacha:run"
            task "test" => [
              "test:units",
              "test:functionals",
              "test:integration",
              "test:javascripts"
            ]
          :code_plain
            $ rake test:javascripts
          :code_plain
            $ rake

        %section
          %h2 Issues
          %ul
            %li
              %del Vendored JS libraries
            %li Stack trace handling

        %section
          %h2 Testable JS code
          %p For another talk...

    %script{src:"js/head.min.js"}
    %script{src:"js/reveal.min.js"}
    :coffee
      Reveal.initialize
        controls: false
        history: true
        center: false
        transition: "linear"
        dependencies: [
          {src:"plugin/notes/notes.js", async:true, condition:->document.body.classList?}
          {src:"plugin/highlight.js", async:true, callback:->hljs.initHighlightingOnLoad()}
        ]
